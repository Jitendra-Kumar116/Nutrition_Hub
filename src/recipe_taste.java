
import com.mashape.unirest.http.HttpResponse;
import com.mashape.unirest.http.Unirest;
import java.awt.Dimension;
import java.awt.Image;
import java.awt.Toolkit;
import java.util.ArrayList;
import javax.swing.ImageIcon;
import javax.swing.table.AbstractTableModel;
import org.json.simple.JSONArray;
import org.json.simple.JSONObject;
import org.json.simple.parser.JSONParser;


public class recipe_taste extends javax.swing.JFrame {

    /**
     * Creates new form recipe_taste
     */
    int id;
    ArrayList<taste> al;
    mytablemodel tm;

    public recipe_taste(int ID) {
        initComponents();
        id = ID;
        al = new ArrayList<>();
        tm = new mytablemodel();
        jEditorPane1.setEditable(false);
        jTable2.setModel(tm);
        jEditorPane1.setContentType("text/html");
        jEditorPane1.setText("<html>"
                + "<p align='center' color='red'><b>NOTE</b> : Tastes are between 0 and 100 while the spiciness value is in scoville on an open\n"
                + "scale of 0 and above.</p>"
                + "</html>");
        getTaste();
        Dimension d = new Dimension(Toolkit.getDefaultToolkit().getScreenSize());
        setSize(d.width, d.height);
        photolb.setBounds(0, 0, d.width, d.height);
        ImageIcon i1 = new ImageIcon("src/uploads/slider12.jpg");
        Image img = i1.getImage().getScaledInstance(d.width, d.height, Image.SCALE_SMOOTH);
        photolb.setIcon(new ImageIcon(img));
        setVisible(true);
        setDefaultCloseOperation(DISPOSE_ON_CLOSE);
        setResizable(false);
    }

    class mytablemodel extends AbstractTableModel {

        @Override
        public int getRowCount() {
            return al.size();
        }

        @Override
        public int getColumnCount() {
            return 7;
        }

        public String getColumnName(int j) {
            String t[] = {"sweetness", "saltiness", "sourness", "bitterness", "savoriness", "fattiness", "spiciness"};
            return t[j];
        }

        @Override
        public Object getValueAt(int i, int j) {
            taste tt = al.get(i);
            if (j == 0) {
                return tt.sweetness;
            } else if (j == 1) {
                return tt.saltiness;
            } else if (j == 2) {
                return tt.sourness;
            } else if (j == 3) {
                return tt.bitterness;
            } else if (j == 4) {
                return tt.savoriness;
            } else if (j == 5) {
                return tt.fattiness;
            } else {
                return tt.spiciness;
            }
        }

    }

    void getTaste() {
        try {
            HttpResponse<String> response = Unirest.get("https://spoonacular-recipe-food-nutrition-v1.p.rapidapi.com/recipes/"+id+"/tasteWidget.json?normalize=false")
                    .header("X-RapidAPI-Key", "652fb35be6msh43c979dd6e258dap1ede35jsn29e136726656")
                    .header("X-RapidAPI-Host", "spoonacular-recipe-food-nutrition-v1.p.rapidapi.com")
                    .asString();
            if (response.getStatus() == 200) {
                String ans = response.getBody();
                JSONParser parser = new JSONParser();
                JSONObject jo = (JSONObject) parser.parse(ans);
                double sweetness = (double) jo.get("sweetness");
                double saltiness = (double) jo.get("saltiness");
                double sourness = (double) jo.get("sourness");
                double bitterness = (double) jo.get("bitterness");
                double savoriness = (double) jo.get("savoriness");
                double fattiness = (double) jo.get("fattiness");
                double spiciness = (double) jo.get("spiciness");
                al.add(new taste(sweetness, saltiness, sourness, bitterness, savoriness, fattiness, spiciness));
                tm.fireTableDataChanged();
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jScrollPane3 = new javax.swing.JScrollPane();
        jTable2 = new javax.swing.JTable();
        jScrollPane2 = new javax.swing.JScrollPane();
        jEditorPane1 = new javax.swing.JEditorPane();
        photolb = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        getContentPane().setLayout(null);

        jLabel1.setFont(new java.awt.Font("Arial", 1, 24)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(255, 255, 255));
        jLabel1.setText("TASTE OF RECIPE");
        getContentPane().add(jLabel1);
        jLabel1.setBounds(530, 190, 290, 50);

        jTable2.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane3.setViewportView(jTable2);

        getContentPane().add(jScrollPane3);
        jScrollPane3.setBounds(370, 260, 560, 50);

        jScrollPane2.setViewportView(jEditorPane1);

        getContentPane().add(jScrollPane2);
        jScrollPane2.setBounds(370, 350, 560, 60);

        photolb.setText("jLabel2");
        getContentPane().add(photolb);
        photolb.setBounds(10, 0, 37, 16);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(recipe_taste.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(recipe_taste.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(recipe_taste.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(recipe_taste.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new recipe_taste(0).setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JEditorPane jEditorPane1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JTable jTable2;
    private javax.swing.JLabel photolb;
    // End of variables declaration//GEN-END:variables
}
